# Chapter 10: Android

Chapter contents:

* [Setting up Apollo Android](10.md#setting-up-apollo-android)
* [First query](10.md#first-query)
* [Querying with variables](10.md#querying-with-variables)
* [Caching](10.md#caching)
* [ViewModel](10.md#viewmodel)
* [Flow](10.md#flow)

---

Background: [mobile apps](bg.md#mobile-apps), [Android](bg.md#android), [Kotlin](bg.md#kotlin)

In this chapter, we'll build a small Android app using the [Apollo Android](https://www.apollographql.com/docs/android/) library to make a couple GraphQL queries and get the data for our UI. 

Apollo Android doesn't use Apollo Client, the JavaScript library behind the [React](6.md), [Vue](7.md), and [React Native](8.md) chapters. It's a separate codebase with its own feature set:

- Generates Java and Kotlin typed models from our operations and [fragments](https://www.apollographql.com/docs/android/essentials/fragments/)
- Three types of [caching](#caching)
- [RxJava](https://www.apollographql.com/docs/android/advanced/rxjava3/) and [coroutine](https://www.apollographql.com/docs/android/advanced/coroutines/) APIs
- [File uploads](https://www.apollographql.com/docs/android/essentials/mutations/#uploading-files)
- [Persisted queries](https://www.apollographql.com/docs/android/advanced/persisted-queries/)
- [Custom scalar types](https://www.apollographql.com/docs/android/essentials/custom-scalar-types/)

The app we'll build is the table of contents for the Guide. It has two pages: the first, a list of chapters, and the second, a list of sections in a chapter.

![The first page with a list of chapters](img/android-chapters.png)
![The second page with a list of sections](img/android-sections.png)
todo

# Setting up Apollo Android

First we clone the starter app, which has everything but the data:

```sh
git clone https://github.com/GraphQLGuide/guide-android.git
cd guide-android/
git checkout 0_0.1.0
```

We can open it in [Android Studio](https://developer.android.com/studio) and see the file structure:

![Android Studio's Project panel with expanded `app/src/`](img/android-studio.png)

We'll be working in the `app/` folder. In `app/src/main/java/`, we have the `guide.graphql.toc` (`toc` stands for table of contents) package with code for the Activity, two Fragments, and two RecyclerView Adapters. In this chapter we'll be:

- Editing the gradle file and existing UI code.
- Adding code to the `data/` folder.
- Adding GraphQL queries and a `schema.json` to the `app/src/main/graphql/[package]/` folder.

When we run the app, we see a single chapter with no sections:

!["Android Dev" chapter](img/android-starter-chapters.png)
![No sections](img/android-starter-sections.png)

Let's start by adding the Apollo Android library to our project:

`app/build.gradle.kts`

```kt
plugins {
  ...
  id("com.apollographql.apollo").version("2.2.2")
}

apollo {
  generateKotlinModels.set(true)
}

dependencies {
  ...
  implementation("com.apollographql.apollo:apollo-runtime:2.2.2")
  implementation("com.apollographql.apollo:apollo-coroutines-support:2.2.2")
}
```

We add the `apollo-runtime` and `apollo-coroutines-support` dependencies, apply version `2.2.2` of the plugin to our project, and tell Apollo to generate the typed models in Kotlin instead of Java.

After saving, we click the "Sync Now" link that appears in the top right. 

Apollo Android needs the schema of the GraphQL server we'll be querying. If the server has introspection enabled, we can fetch the schema file with this gradle task:

```sh
$ mkdir -p app/src/main/graphql/guide/graphql/toc
$ ./gradlew :app:downloadApolloSchema --endpoint='https://api.graphql.guide/graphql' --schema='app/src/main/graphql/guide/graphql/toc/schema.json'
```

> `mkdir -p` creates any necessary intermediate directories ðŸ˜Ž.

If it's blocked on Mac, we do the following:

- Open System Preferences -> Security & Privacy -> General.
- Select "Allow Anyway."

![Security & Privacy General tab](img/security-and-privacy-settings.png)

- Re-run the `./gradlew` command.
- Select "Open."

![Cannot verify developer dialog for adoptopenjdk.net](img/security-dialog.png)

We can check to make sure it downloaded the schema file:

```sh
$ ls app/src/main/graphql/guide/graphql/toc/
schema.json
```

# First query

> If youâ€™re jumping in here, `git checkout 1_0.1.0` (tag [1_0.1.0](https://github.com/GraphQLGuide/guide-android/tree/1_0.1.0), or compare [1...2](https://github.com/GraphQLGuide/guide-android/compare/1_0.1.0...2_0.1.0))

With the schema file, Apollo Android will be able to generate typed models from our queries. Let's add our first query, for the list of chapters:

`app/src/main/graphql/guide/graphql/toc/Chapters.graphql`

```gql
query Chapters {
  chapters {
    id
    number
    title
  }
}
```

After saving the file and rebuilding, we get a `ChaptersQuery.kt` file (it's in a `build/` folderâ€”we can open it via `âŒ˜O` or Navigate > Class):

```kt
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package guide.graphql.toc

import com.apollographql.apollo.api.Operation
import com.apollographql.apollo.api.OperationName
import com.apollographql.apollo.api.Query
import com.apollographql.apollo.api.Response
import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.ScalarTypeAdapters
import com.apollographql.apollo.api.ScalarTypeAdapters.Companion.DEFAULT
import com.apollographql.apollo.api.internal.OperationRequestBodyComposer
import com.apollographql.apollo.api.internal.QueryDocumentMinifier
import com.apollographql.apollo.api.internal.ResponseFieldMapper
import com.apollographql.apollo.api.internal.ResponseFieldMarshaller
import com.apollographql.apollo.api.internal.ResponseReader
import com.apollographql.apollo.api.internal.SimpleOperationResponseParser
import com.apollographql.apollo.api.internal.Throws
import kotlin.Array
import kotlin.Boolean
import kotlin.Double
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import okio.Buffer
import okio.BufferedSource
import okio.ByteString
import okio.IOException

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter")
class ChaptersQuery : Query<ChaptersQuery.Data, ChaptersQuery.Data, Operation.Variables> {
  override fun operationId(): String = OPERATION_ID
  override fun queryDocument(): String = QUERY_DOCUMENT
  override fun wrapData(data: Data?): Data? = data
  override fun variables(): Operation.Variables = Operation.EMPTY_VARIABLES
  override fun name(): OperationName = OPERATION_NAME
  override fun responseFieldMapper(): ResponseFieldMapper<Data> = ResponseFieldMapper.invoke {
    Data(it)
  }

  @Throws(IOException::class)
  override fun parse(source: BufferedSource, scalarTypeAdapters: ScalarTypeAdapters): Response<Data>
      = SimpleOperationResponseParser.parse(source, this, scalarTypeAdapters)

  @Throws(IOException::class)
  override fun parse(byteString: ByteString, scalarTypeAdapters: ScalarTypeAdapters): Response<Data>
      = parse(Buffer().write(byteString), scalarTypeAdapters)

  @Throws(IOException::class)
  override fun parse(source: BufferedSource): Response<Data> = parse(source, DEFAULT)

  @Throws(IOException::class)
  override fun parse(byteString: ByteString): Response<Data> = parse(byteString, DEFAULT)

  override fun composeRequestBody(scalarTypeAdapters: ScalarTypeAdapters): ByteString =
      OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = false,
    withQueryDocument = true,
    scalarTypeAdapters = scalarTypeAdapters
  )

  override fun composeRequestBody(): ByteString = OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = false,
    withQueryDocument = true,
    scalarTypeAdapters = DEFAULT
  )

  override fun composeRequestBody(
    autoPersistQueries: Boolean,
    withQueryDocument: Boolean,
    scalarTypeAdapters: ScalarTypeAdapters
  ): ByteString = OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = autoPersistQueries,
    withQueryDocument = withQueryDocument,
    scalarTypeAdapters = scalarTypeAdapters
  )

  /**
   * extend type Subscription {
   *   sectionCreated: Section
   *   sectionUpdated: Section
   *   sectionRemoved: ObjID
   * }
   */
  data class Chapter(
    val __typename: String = "Chapter",
    val id: Int,
    val number: Double?,
    val title: String
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Chapter.__typename)
      writer.writeInt(RESPONSE_FIELDS[1], this@Chapter.id)
      writer.writeDouble(RESPONSE_FIELDS[2], this@Chapter.number)
      writer.writeString(RESPONSE_FIELDS[3], this@Chapter.title)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forInt("id", "id", null, false, null),
          ResponseField.forDouble("number", "number", null, true, null),
          ResponseField.forString("title", "title", null, false, null)
          )

      operator fun invoke(reader: ResponseReader): Chapter = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val id = readInt(RESPONSE_FIELDS[1])!!
        val number = readDouble(RESPONSE_FIELDS[2])
        val title = readString(RESPONSE_FIELDS[3])!!
        Chapter(
          __typename = __typename,
          id = id,
          number = number,
          title = title
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Chapter> = ResponseFieldMapper { invoke(it) }
    }
  }

  /**
   * Data from the response after executing this GraphQL operation
   */
  data class Data(
    val chapters: List<Chapter>?
  ) : Operation.Data {
    override fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeList(RESPONSE_FIELDS[0], this@Data.chapters) { value, listItemWriter ->
        value?.forEach { value ->
          listItemWriter.writeObject(value.marshaller())}
      }
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forList("chapters", "chapters", null, true, null)
          )

      operator fun invoke(reader: ResponseReader): Data = reader.run {
        val chapters = readList<Chapter>(RESPONSE_FIELDS[0]) { reader ->
          reader.readObject<Chapter> { reader ->
            Chapter(reader)
          }
        }?.map { it!! }
        Data(
          chapters = chapters
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Data> = ResponseFieldMapper { invoke(it) }
    }
  }

  companion object {
    const val OPERATION_ID: String =
        "5749abd11596accd518963e92d32d4f37b4da7073cb1142b67635bfcfae7a330"

    val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |query Chapters {
          |  chapters {
          |    __typename
          |    id
          |    number
          |    title
          |  }
          |}
          """.trimMargin()
        )

    val OPERATION_NAME: OperationName = object : OperationName {
      override fun name(): String = "Chapters"
    }
  }
}
```

We can now import and use the `ChaptersQuery` and `Chapter` classes. The latter has typed data fields matching our query:

```
data class Chapter(
  val __typename: String = "Chapter",
  val id: Int,
  val number: Double?,
  val title: String
) { 
```

To use the `ChaptersQuery` class and send our query to the server, we need a client instance. Let's create it in the `data/` folder:

`app/src/main/java/guide/graphql/toc/data/Apollo.kt`

```kt
package guide.graphql.toc.data

import com.apollographql.apollo.ApolloClient

val apolloClient: ApolloClient = ApolloClient.builder()
  .serverUrl("https://api.graphql.guide/graphql")
  .build()
```

And in `ChaptersFragment`, let's replace this list of one string:

```kt
adapter.updateChapters(listOf("Android Dev"))
```

with the results of the query:

```kt
import androidx.lifecycle.lifecycleScope
import com.apollographql.apollo.coroutines.toDeferred
import com.apollographql.apollo.exception.ApolloException
import guide.graphql.toc.ChaptersQuery
import guide.graphql.toc.data.apolloClient

class ChaptersFragment : Fragment() {
  ...

  override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
    ...

    lifecycleScope.launchWhenStarted {
      try {
        val response = apolloClient.query(
            ChaptersQuery()
        ).toDeferred().await()

        if (response.hasErrors()) {
          throw Exception(response.errors?.get(0)?.message)
        }

        val chapters = response.data?.chapters ?: throw Exception("Data is null")
        adapter.updateChapters(chapters)
      } catch (e: ApolloException) {
        showErrorMessage("GraphQL request failed")
      } catch (e: Exception) {
        showErrorMessage(e.message.orEmpty())
      }
    }
  }
}
```    

Our query statement (`apolloClient.query(ChaptersQuery()).toDeferred().await()`) uses the client instance we created, the `ChaptersQuery` class, and the `.toDeferred()` method from the [coroutines API](https://www.apollographql.com/docs/android/advanced/coroutines/).

If the response has errors, we display the first error message. If there's an error during query execution, for instance with the internet connection, `apolloClient.query()` will throw an `ApolloException`.

We're left with a type mismatch error on `adapter.updateChapters(chapters)`:

!["Type mismatch" error notice](img/android-chapters-type-mismatch.png)

Let's update the type that the method takes:

`app/src/main/java/guide/graphql/toc/ui/chapters/ChaptersAdapter.kt`

```kt
import guide.graphql.toc.ChaptersQuery

class ChaptersAdapter(
  private val context: Context,
  private var chapters: List<ChaptersQuery.Chapter> = listOf(),
  private val onItemClicked: ((ChaptersQuery.Chapter) -> Unit)
) : RecyclerView.Adapter<ChaptersAdapter.ViewHolder>() {

  ...

  fun updateChapters(chapters: List<ChaptersQuery.Chapter>) {
    this.chapters = chapters
    notifyDataSetChanged()
  }

  ...
}
```

Since `chapters` no longer holds strings, we also need to update this:

```kt
holder.binding.chapterHeader.text = chapter
```

to:

```kt
import android.view.View
import guide.graphql.toc.R

...

  override fun onBindViewHolder(holder: ViewHolder, position: Int) {
    val chapter = chapters[position]
    val header =
      if (chapter.number == null) chapter.title else context.getString(
        R.string.chapter_number,
        chapter.number.toInt().toString()
      )

    holder.binding.chapterHeader.text = header
    if (chapter.number == null) {
      holder.binding.chapterSubheader.visibility = View.GONE

    } else {
      holder.binding.chapterSubheader.text = chapter.title
      holder.binding.chapterSubheader.visibility = View.VISIBLE
    }

    holder.binding.root.setOnClickListener {
      onItemClicked.invoke(chapter)
    }
  }
```

We display the chapter number and title, or just the title when there is no number. At the end, we call `onItemClicked`, which is defined in the fragment, and can be updated to:

`app/src/main/java/guide/graphql/toc/ui/chapters/ChaptersAdapter.kt`

```kt
  val adapter =
    ChaptersAdapter(
      requireContext()
    ) { chapter ->
      findNavController().navigate(
        ChaptersFragmentDirections.viewSections(
          chapterId = chapter.id,
          chapterNumber = chapter.number?.toInt() ?: -1,
          chapterTitle = if (chapter.number == null) chapter.title else getString(
            R.string.chapter_title,
            chapter.number.toInt().toString(),
            chapter.title
          )
        )
      )
    }
```

Now when we rebuild and run the app, we see all the chapters, and when we click one, the header matches:

![The first page with all chapters listed](img/android-chapters.png)
![The second page with Chapter 2 header](img/android-sections-header.png)

# Querying with variables

> If youâ€™re jumping in here, `git checkout 2_0.1.0` (tag [2_0.1.0](https://github.com/GraphQLGuide/guide-android/tree/2_0.1.0), or compare [2...3](https://github.com/GraphQLGuide/guide-android/compare21_0.1.0...3_0.1.0))

Once we click a chapter, we see "No sections," which is true for the Preface but not for the other chapters. We need to query for the list of sections in the selected chapter. So let's add a query document:

`app/src/main/graphql/guide/graphql/toc/Sections.graphql`

```gql
query Sections($id: Int!) {
  chapter(id: $id) {
    sections {
      number
      title
    }
  }
}
```

After saving the file, we rebuild to get the new `SectionsQuery` class generated and code completion working. 

The query needs the current chapter's `id`, which we have in the fragment's `chapterId` argument. We can execute the query as we did before in `onViewCreated()`:

`app/src/main/java/guide/graphql/toc/ui/sections/SectionsFragment.kt`

```kt
import androidx.lifecycle.lifecycleScope
import com.apollographql.apollo.coroutines.toDeferred
import com.apollographql.apollo.exception.ApolloException
import guide.graphql.toc.SectionsQuery
import guide.graphql.toc.data.apolloClient

class SectionsFragment : Fragment() {
  ...

  override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
    ...

    lifecycleScope.launchWhenStarted {
      binding.spinner.visibility = View.VISIBLE
      binding.error.visibility = View.GONE
      try {
        val response = apolloClient.query(
          SectionsQuery(id = args.chapterId)
        ).toDeferred().await()

        if (response.hasErrors()) {
          throw Exception("Response has errors")
        }

        val sections = response.data?.chapter?.sections ?: throw Exception("Data is null")

        if (sections.size > 1) {
          adapter.updateSections(sections)
          binding.spinner.visibility = View.GONE
          binding.error.visibility = View.GONE
        } else {
          throw Exception("No sections")
        }
      } catch (e: ApolloException) {
        showErrorMessage("GraphQL request failed")
      } catch (e: Exception) {
        showErrorMessage(e.message.orEmpty())
      }
    }
  }
}
```

We include the variable like this: `SectionsQuery(id = args.chapterId)`, and as before, we either show an error message or update the adapter. We need to implement the adapter's `updateSections()` function. For the argument type, we can use the generated `SectionsQuery.Section` data class:

`app/src/main/java/guide/graphql/toc/ui/sections/SectionsAdapter.kt`

```kt
import guide.graphql.toc.SectionsQuery

class SectionsAdapter(
  private val context: Context,
  private val chapterNumber: Int,
  private var sections: List<SectionsQuery.Section?> = listOf()
) : RecyclerView.Adapter<SectionsAdapter.ViewHolder>() {
  ...

  fun updateSections(sections: List<SectionsQuery.Section?>) {
    this.sections = sections
    notifyDataSetChanged()
  }

  override fun getItemCount(): Int {
    return sections.size
  }

  override fun onBindViewHolder(holder: ViewHolder, position: Int) {
    val section = sections[position]
    section?.let {
      holder.binding.sectionTitle.text = context.getString(
        R.string.section_title,
        chapterNumber.toString(),
        section.number.toString(),
        section.title
      )
    }
  }
}
```

Now when we select Chapter 2, we see the list of sections ðŸ’ƒ.

![The second page with all sections listed](img/android-sections.png)

# Caching

> If youâ€™re jumping in here, `git checkout 3_0.1.0` (tag [3_0.1.0](https://github.com/GraphQLGuide/guide-android/tree/3_0.1.0), or compare [3...4](https://github.com/GraphQLGuide/guide-android/compare/3_0.1.0...4_0.1.0))

In the JavaScript Apollo Client, caching is enabled by default. In Apollo Android, it isn'tâ€”we might notice that when we go back and forth between the first and second page, the second page sometimes shows a loading spinner as it waits on the response from the server. 

There are three types of caching we can enable:

- [HTTP caching](https://www.apollographql.com/docs/android/essentials/http-cache/): Whenever an HTTP request with a query operation is sent to the server, the response is saved for a certain configurable period of time in a file. When subsequent identical requests are made, Apollo will check the file, find the saved response, and return it instead of sending the request to the server.
- [Normalized caching](https://www.apollographql.com/docs/android/essentials/normalized-cache/): Take objects out of query responses and save them by type and ID. If an object that is part of another query is changed, any code watching that query is given the updated results.
  - In memory: Use the [LruNormalizedCacheFactory](https://www.apollographql.com/docs/android/essentials/normalized-cache/#storing-your-data-in-memory) class to store the cached object in memory.
  - In SQLite: Use the [SqlNormalizedCacheFactory](https://www.apollographql.com/docs/android/essentials/normalized-cache/#persisting-your-data-in-a-sqlite-database) class to persist the cache between app restarts.

We can also [combine Lru and Sql in a chain](https://www.apollographql.com/docs/android/essentials/normalized-cache/#chaining-caches).

When querying, we can specify a fetch policy:

- `CACHE_ONLY`: Try to resolve the query from the cache.
- `NETWORK_ONLY`: Try to resolve from the network (by sending the query to the server).
- `CACHE_FIRST` (default): First try the cache, and if the result isn't there, use the network.
- `NETWORK_FIRST`: First try the network, and if we don't get a response from the server, look in the cache.
- [`CACHE_AND_NETWORK`](https://github.com/apollographql/apollo-android/blob/9a77b4adf79bfc512f21fb059e41b25407dee5b4/apollo-runtime/src/main/java/com/apollographql/apollo/fetcher/ApolloResponseFetchers.java#L39-L46) (only available with a normalized cache): First try reading from the cache. Then, even if we found the data in the cache, make the network request.

We can improve the efficiency of normalization by [providing functions](https://www.apollographql.com/docs/android/essentials/normalized-cache/#specifying-your-object-ids) that return an object's key. We can also read a write [directly to the cache](https://www.apollographql.com/docs/android/essentials/normalized-cache/#interacting-with-the-cache).

To add an in-memory cache to our app, we make a small addition to `data/Apollo.kt`:

`app/src/main/java/guide/graphql/toc/data/Apollo.kt`

```kt
package guide.graphql.toc.data

import com.apollographql.apollo.ApolloClient
import com.apollographql.apollo.cache.normalized.lru.EvictionPolicy
import com.apollographql.apollo.cache.normalized.lru.LruNormalizedCacheFactory

val cacheFactory =
  LruNormalizedCacheFactory(EvictionPolicy.builder().maxSizeBytes(10 * 1024 * 1024).build())

val apolloClient: ApolloClient = ApolloClient.builder()
  .serverUrl("https://api.graphql.guide/graphql")
  .normalizedCache(cacheFactory)
  .build()
```

We create a `cacheFactory` that starts evicting (deleting) the least recently used data from the cache once the cache size grows to 10 MB. Now when we go back and forth between the chapter list and the Chapter 2 section list, there's no delay after the first time the sections are loaded. 

# ViewModel

So far we've been doing our data fetching in fragments. Android recommends using [`ViewModel`](https://developer.android.com/topic/libraries/architecture/viewmodel) classes to "store and manage UI-related data in a lifecycle conscious way." In fact, our code has a common lifecycle bug that can occur with fragment data fetchingâ€”when the data is received from the server after the view is destroyed, and we try to update the view using the binding, the app crashes.

The [viewmodel](https://github.com/GraphQLGuide/guide-android/tree/viewmodel) branch uses `ViewModel` classes like this:

[`app/src/main/java/guide/graphql/toc/ui/chapters/ChaptersViewModel.kt`](https://github.com/GraphQLGuide/guide-android/blob/viewmodel/app/src/main/java/guide/graphql/toc/ui/chapters/ChaptersViewModel.kt)

```kt
package guide.graphql.toc.ui.chapters

import androidx.lifecycle.LiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.liveData
import com.apollographql.apollo.coroutines.toDeferred
import com.apollographql.apollo.exception.ApolloException
import guide.graphql.toc.ChaptersQuery
import guide.graphql.toc.data.Resource
import guide.graphql.toc.data.apolloClient

class ChaptersViewModel : ViewModel() {

  val chapterList: LiveData<Resource<List<ChaptersQuery.Chapter>>> = liveData {
    emit(Resource.loading(null))
    try {
      val response = apolloClient.query(
        ChaptersQuery()
      ).toDeferred().await()

      if (response.hasErrors()) {
        throw Exception("Response has errors")
      }

      val chapters = response.data?.chapters ?: throw Exception("Data is null")
      emit(Resource.success(chapters))
    } catch (e: ApolloException) {
      emit(Resource.error("GraphQL request failed", null))
    } catch (e: Exception) {
      emit(Resource.error(e.message.orEmpty(), null))
    }
  }
}
```

And our query in the fragment is replaced by:

[`app/src/main/java/guide/graphql/toc/ui/chapters/ChaptersFragment.kt`](https://github.com/GraphQLGuide/guide-android/blob/viewmodel/app/src/main/java/guide/graphql/toc/ui/chapters/ChaptersFragment.kt)

```kt
  viewModel.chapterList.observe(viewLifecycleOwner, Observer { chapterListResponse ->
    when (chapterListResponse.status) {
      Status.SUCCESS -> {
        chapterListResponse.data?.let {
          adapter.updateChapters(it)
        }
      }
      Status.ERROR -> Toast.makeText(
        requireContext(),
        getString(R.string.graphql_error, chapterListResponse.message),
        Toast.LENGTH_SHORT
      ).show()
      Status.LOADING -> {
      }
    }
  })
```

# Flow

So far the only coroutine function we've been using is `toDeferred()`, which gives us a single response. Here is the full coroutines API:

```kt
fun <T> ApolloSubscriptionCall<T>.toFlow(): Flow<Response<T>>
fun <T> ApolloCall<T>.toFlow()
fun <T> ApolloQueryWatcher<T>.toFlow()
fun <T> ApolloSubscriptionCall<T>.toFlow(): Flow<Response<T>>
fun <T> ApolloCall<T>.toDeferred(): Deferred<Response<T>>
fun ApolloPrefetch.toJob(): Job
```

`toFlow()` allows us to get a stream of results. For instance, we could watch a `CACHE_AND_NETWORK` query and receive, sequentially:

- The results from the cache.
- The results from the server.
- Updated results when a query with overlapping data changes an object in the cache.

And the last type stream result can continue occurring.

The [`viewmodel-flow`](https://github.com/GraphQLGuide/guide-android/tree/viewmodel-flow) branch uses `.watcher().toFlow()`. We can compare the difference between this and the last branch on GitHub: 

[guide-android/compare/viewmodel...viewmodel-flow](https://github.com/GraphQLGuide/guide-android/compare/viewmodel...viewmodel-flow)

Here's the updated `ViewModel` and fragment code:

[`app/src/main/java/guide/graphql/toc/ui/chapters/ChaptersViewModel.kt`](https://github.com/GraphQLGuide/guide-android/blob/viewmodel-flow/app/src/main/java/guide/graphql/toc/ui/chapters/ChaptersViewModel.kt)

```kt
package guide.graphql.toc.ui.chapters

import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.asLiveData
import com.apollographql.apollo.coroutines.toFlow
import com.apollographql.apollo.fetcher.ApolloResponseFetchers
import guide.graphql.toc.ChaptersQuery
import guide.graphql.toc.data.apolloClient
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.flow.catch
import kotlinx.coroutines.flow.distinctUntilChanged
import kotlinx.coroutines.flow.map

@ExperimentalCoroutinesApi
class ChaptersViewModel : ViewModel() {

  val chapterException: MutableLiveData<Throwable?> = MutableLiveData()

  val chapterList = apolloClient.query(ChaptersQuery())
    .responseFetcher(ApolloResponseFetchers.CACHE_AND_NETWORK).watcher().toFlow()
    .distinctUntilChanged().map { response ->
      if (response.hasErrors()) throw Exception("Response has errors")
      val chapters = response.data?.chapters ?: throw Exception("Data is null")
      chapterException.value = null
      return@map chapters
    }.catch { exception ->
      chapterException.postValue(exception)
    }.asLiveData()
}
```

[`app/src/main/java/guide/graphql/toc/ui/chapters/ChaptersFragment.kt`](https://github.com/GraphQLGuide/guide-android/blob/viewmodel-flow/app/src/main/java/guide/graphql/toc/ui/chapters/ChaptersFragment.kt)

```kt
  viewModel.chapterList.observe(viewLifecycleOwner, Observer {
    adapter.submitList(it)
  })

  viewModel.chapterException.observe(viewLifecycleOwner, Observer {
    it?.let { exception ->
      Toast.makeText(
        requireContext(),
        getString(
          R.string.graphql_error, if (exception is ApolloException)
            "GraphQL request failed"
          else
            exception.message.orEmpty()
        ),
        Toast.LENGTH_SHORT
      ).show()
    }
  })
```        

An alternative to using Apollo's Flow API is its [RxJava3 API](https://www.apollographql.com/docs/android/advanced/rxjava3/) like this:

```kt
val observable = apolloClient.rxQuery(ChaptersQuery())
```

